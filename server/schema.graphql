# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EmployeeDetail {
  createdAt: DateTime!
  empName: String!
  empSalary: Float!
  id: String!
  manager: String
  updatedAt: DateTime!
}

input EmployeeDetailCreateInput {
  empName: String!
  empSalary: Float!
  manager: String
}

input EmployeeDetailOrderByInput {
  createdAt: SortOrder
  empName: SortOrder
  empSalary: SortOrder
  id: SortOrder
  manager: SortOrder
  updatedAt: SortOrder
}

input EmployeeDetailUpdateInput {
  empName: String
  empSalary: Float
  manager: String
}

input EmployeeDetailWhereInput {
  empName: StringFilter
  empSalary: IntFilter
  id: StringFilter
  manager: StringNullableFilter
}

input EmployeeDetailWhereUniqueInput {
  id: String!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createEmployeeDetail(data: EmployeeDetailCreateInput!): EmployeeDetail!
  createProjectManager(data: ProjectManagerCreateInput!): ProjectManager!
  createUser(data: UserCreateInput!): User!
  deleteEmployeeDetail(where: EmployeeDetailWhereUniqueInput!): EmployeeDetail!
  deleteProjectManager(where: ProjectManagerWhereUniqueInput!): ProjectManager!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateEmployeeDetail(data: EmployeeDetailUpdateInput!, where: EmployeeDetailWhereUniqueInput!): EmployeeDetail!
  updateProjectManager(data: ProjectManagerUpdateInput!, where: ProjectManagerWhereUniqueInput!): ProjectManager!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type ProjectManager {
  createdAt: DateTime!
  id: String!
  pmName: String!
  pmSalary: String
  updatedAt: DateTime!
}

input ProjectManagerCreateInput {
  pmName: String!
  pmSalary: String
}

input ProjectManagerOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  pmName: SortOrder
  pmSalary: SortOrder
  updatedAt: SortOrder
}

input ProjectManagerUpdateInput {
  pmName: String
  pmSalary: String
}

input ProjectManagerWhereInput {
  id: StringFilter
  pmName: StringFilter
  pmSalary: StringNullableFilter
}

input ProjectManagerWhereUniqueInput {
  id: String!
}

type Query {
  _employeeDetailsMeta(orderBy: EmployeeDetailOrderByInput, skip: Float, take: Float, where: EmployeeDetailWhereInput): MetaQueryPayload!
  _projectManagersMeta(orderBy: ProjectManagerOrderByInput, skip: Float, take: Float, where: ProjectManagerWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: UserOrderByInput, skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  employeeDetail(where: EmployeeDetailWhereUniqueInput!): EmployeeDetail
  employeeDetails(orderBy: EmployeeDetailOrderByInput, skip: Float, take: Float, where: EmployeeDetailWhereInput): [EmployeeDetail!]!
  projectManager(where: ProjectManagerWhereUniqueInput!): ProjectManager
  projectManagers(orderBy: ProjectManagerOrderByInput, skip: Float, take: Float, where: ProjectManagerWhereInput): [ProjectManager!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: UserOrderByInput, skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
